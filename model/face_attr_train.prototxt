name: "ANet"
# =========train input=======
layer
{
    name: "Data"
    type: "Python"
    top: "data"
    top: "label"
    top: "pts"
    include {
        phase: TRAIN
    }
    python_param {
        module: "myDataLayer"
        layer: "Data_Layer_train"
        param_str: '{"mirror": True, "illumination": True, "im_size": 64, "crop_size": 56, "batch_size": 384, "src_file": "model/train.txt", "img_basepath": "/workspace/mnt/group/face-det/zhubin/"}'
    }
}
# --------------------------

layer {
  name: "conv1_rgb"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    name: "conv1_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv1_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 32
    kernel_size: 3
    stride: 1
	pad:1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
	  value: 0
    }
  }
}
layer {
	bottom: "conv1"
	top: "conv1"
	name: "bn_conv1"
	type: "BatchNorm"
	batch_norm_param {
    use_global_stats: false
	}
}

layer {
	bottom: "conv1"
	top: "conv1"
	name: "scale_conv1"
	type: "Scale"
	scale_param {
		bias_term: true
	}
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "conv1"
  top: "conv2"
  param {
    name: "conv2_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv2_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 3
    stride: 1
	pad:1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
	  value: 0
    }
  }
}
layer {
	bottom: "conv2"
	top: "conv2"
	name: "bn_conv2"
	type: "BatchNorm"
	batch_norm_param {
    use_global_stats: false
	}
}

layer {
	bottom: "conv2"
	top: "conv2"
	name: "scale_conv2"
	type: "Scale"
	scale_param {
		bias_term: true
	}
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool1"
  top: "conv3"
  param {
    name: "conv3_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv3_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    kernel_size: 3
    stride: 1
	pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
	  value: 0
    }
  }
}
layer {
	bottom: "conv3"
	top: "conv3"
	name: "bn_conv3"
	type: "BatchNorm"
	batch_norm_param {
    use_global_stats: false
	}
}

layer {
	bottom: "conv3"
	top: "conv3"
	name: "scale_conv3"
	type: "Scale"
	scale_param {
		bias_term: true
	}
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    name: "conv4_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv4_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    kernel_size: 3
    stride: 1
	pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
	  value: 0
    }
  }
}
layer {
	bottom: "conv4"
	top: "conv4"
	name: "bn_conv4"
	type: "BatchNorm"
	batch_norm_param {
    use_global_stats: false
	}
}

layer {
	bottom: "conv4"
	top: "conv4"
	name: "scale_conv4"
	type: "Scale"
	scale_param {
		bias_term: true
	}
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv4"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "conv5"
  type: "Convolution"
  bottom: "pool2"
  top: "conv5"
  param {
    name: "conv5_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv5_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    kernel_size: 3
    stride: 1
	pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
	  value: 0
    }
  }
}
layer {
	bottom: "conv5"
	top: "conv5"
	name: "bn_conv5"
	type: "BatchNorm"
	batch_norm_param {
    use_global_stats: false
	}
}

layer {
	bottom: "conv5"
	top: "conv5"
	name: "scale_conv5"
	type: "Scale"
	scale_param {
		bias_term: true
	}
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "conv6"
  type: "Convolution"
  bottom: "conv5"
  top: "conv6"
  param {
    name: "conv6_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv6_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    kernel_size: 3
    stride: 1
	pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
	  value: 0
    }
  }
}
layer {
	bottom: "conv6"
	top: "conv6"
	name: "bn_conv6"
	type: "BatchNorm"
	batch_norm_param {
    use_global_stats: false
	}
}

layer {
	bottom: "conv6"
	top: "conv6"
	name: "scale_conv6"
	type: "Scale"
	scale_param {
		bias_term: true
	}
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "conv6"
  top: "conv6"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv6"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv7"
  type: "Convolution"
  bottom: "pool3"
  top: "conv7"
  param {
    name: "conv7_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv7_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    kernel_size: 3
    stride: 1
	pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
	  value: 0
    }
  }
}
layer {
	bottom: "conv7"
	top: "conv7"
	name: "bn_conv7"
	type: "BatchNorm"
	batch_norm_param {
    use_global_stats: false
	}
}

layer {
	bottom: "conv7"
	top: "conv7"
	name: "scale_conv7"
	type: "Scale"
	scale_param {
		bias_term: true
	}
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "conv7"
  top: "conv7"
}
layer {
  name: "conv8"
  type: "Convolution"
  bottom: "conv7"
  top: "conv8"
  param {
    name: "conv8_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv8_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    kernel_size: 3
    stride: 1
	pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
	  value: 0
    }
  }
}
layer {
	bottom: "conv8"
	top: "conv8"
	name: "bn_conv8"
	type: "BatchNorm"
	batch_norm_param {
    use_global_stats: false
	}
}

layer {
	bottom: "conv8"
	top: "conv8"
	name: "scale_conv8"
	type: "Scale"
	scale_param {
		bias_term: true
	}
}
layer {
  name: "relu8"
  type: "ReLU"
  bottom: "conv8"
  top: "conv8"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv8"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv9"
  type: "Convolution"
  bottom: "pool4"
  top: "conv9"
  param {
    name: "conv9_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv9_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    kernel_size: 3
    stride: 1
	pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
	  value: 0
    }
  }
}
layer {
	bottom: "conv9"
	top: "conv9"
	name: "bn_conv9"
	type: "BatchNorm"
	batch_norm_param {
    use_global_stats: false
	}
}

layer {
	bottom: "conv9"
	top: "conv9"
	name: "scale_conv9"
	type: "Scale"
	scale_param {
		bias_term: true
	}
}
layer {
  name: "relu9"
  type: "ReLU"
  bottom: "conv9"
  top: "conv9"
}
layer {
  name: "conv10"
  type: "Convolution"
  bottom: "conv9"
  top: "conv10"
  param {
    name: "conv10_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv10_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    kernel_size: 3
    stride: 1
	pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
	  value: 0
    }
  }
}
layer {
	bottom: "conv10"
	top: "conv10"
	name: "bn_conv10"
	type: "BatchNorm"
	batch_norm_param {
    use_global_stats: false
	}
}

layer {
	bottom: "conv10"
	top: "conv10"
	name: "scale_conv10"
	type: "Scale"
	scale_param {
		bias_term: true
	}
}
layer {
  name: "relu10"
  type: "ReLU"
  bottom: "conv10"
  top: "conv10"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv10"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "dropout"
  type: "Dropout"
  bottom: "pool5"
  top: "drfc5"
  dropout_param {
    dropout_ratio: 0.5
 }
}

# ========= cls ============

layer
{
    name: "cls_gender"
    type: "InnerProduct"
    bottom: "drfc5"
    top: "cls_gender"
    param {
        name: "cls_gender_w"
        lr_mult: 1
        decay_mult: 1
    }
    param {
        name: "cls_gender_b"
        lr_mult: 2
        decay_mult: 0
    }
    inner_product_param {
        num_output: 2
        weight_filler {
            type: "gaussian"
            std: 0.01
        }
        bias_filler {
            type: "constant"
            value: 0
        }
    }
}

layer
{
    name: "loss_cls_gender"
    type: "SoftmaxWithLoss"
    bottom: "cls_gender"
    bottom: "label"
    top: "loss_gender"
    loss_weight: 1
}

# ========= age ============

layer
{
    name: "reg_age"
    type: "InnerProduct"
    bottom: "drfc5"
    top: "reg_age"
    param {
        name: "reg_age_w"
        lr_mult: 1
        decay_mult: 1
    }
    param {
        name: "reg_age_b"
        lr_mult: 2
        decay_mult: 0
    }
    inner_product_param {
        num_output: 1
        weight_filler {
            type: "gaussian"
            std: 0.01
        }
        bias_filler {
            type: "constant"
            value: 0
        }
    }
}

layer
{
    name: "age_filter"
    type: "Python"
    bottom: "reg_age"
    bottom: "pts"
    top: "age_valid"
    top: "pts_valid"
    python_param {
        module: "myDataLayer"
        layer: "filter_Layer"
    }
}

layer
{
    name: "loss_reg_age"
    type: "EuclideanLoss"
    bottom: "age_valid"
    bottom: "pts_valid"
    top: "loss_age"
    loss_weight: 1
}

